cmake_minimum_required(VERSION 2.8)

# Change this section to correspond with your project info.
project(smart-math)

set(CMAKE_INCLUDE_SYSTEM_FLAG_C "-isystem ")

set(PROJECT_SUMMARY                            "Strathclyde Mechanical and Aerospace Researt Toolbox for Mathematics (SMART-MATH)")
set(${CMAKE_PROJECT_NAME}_VENDOR_NAME          "spaceART")
set(${CMAKE_PROJECT_NAME}_VENDOR_CONTACT       "spaceART@strathclyde.ac.uk")
set(${CMAKE_PROJECT_NAME}_VERSION_MAJOR        0.1)
set(${CMAKE_PROJECT_NAME}_VERSION_MINOR        0.1)
set(${CMAKE_PROJECT_NAME}_VERSION_PATCH        0.1)
set(PROJECT_VERSION
  "${${CMAKE_PROJECT_NAME}_VERSION_MAJOR}.${${CMAKE_PROJECT_NAME}_VERSION_MINOR}.${${CMAKE_PROJECT_NAME}_VERSION_PATCH}")

set(PROJECT_PATH                               "${CMAKE_CURRENT_SOURCE_DIR}")
set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH}     "${PROJECT_PATH}/cmake/Modules")
set(INCLUDE_PATH                               "${PROJECT_PATH}/include")
set(EIGEN_INCLUDE_PATH                         "${PROJECT_PATH}/include/LinearAlgebra")
set(SRC_PATH                                   "${PROJECT_PATH}/src")
set(TEST_SRC_PATH                              "${PROJECT_PATH}/test")
if(NOT EXTERNAL_PATH)
  set(EXTERNAL_PATH                            "${PROJECT_PATH}/external")
endif(NOT EXTERNAL_PATH)
if(NOT DOCS_PATH)
  set(DOCS_PATH                                "${PROJECT_PATH}/docs")
endif(NOT DOCS_PATH)
set(LIB_PATH                                   "${PROJECT_BINARY_DIR}/lib")
set(LIB_NAME                                   "smart-math")
set(BIN_PATH                                   "${PROJECT_BINARY_DIR}/bin")
set(MAIN_NAME                                  "main")
set(TEST_PATH                                  "${PROJECT_BINARY_DIR}/test")
set(TEST_NAME                                  "test")
set(EXAMPLES_PATH                              "${PROJECT_BINARY_DIR}/examples")
set(EXAMPLES_NAME                              "examples")

option(BUILD_STATIC			       "Build static library"		OFF)
option(BUILD_MAIN                              "Build main function"            ON)
option(BUILD_DOCS                              "Build docs"                     OFF)
option(BUILD_TESTS                             "Build tests"                    OFF)
option(BUILD_EXAMPLES                          "Build examples"                 OFF)
option(ENABLE_SMARTUQ			       "UQ methods"			OFF)

# Initialise (empty) list of libraries to link against.
SET(MANDATORY_LIBRARIES "")

if(ENABLE_SMARTUQ)
        find_library(SMARTUQ_LIBRARY NAMES smart-uq)
        find_path(SMARTUQ_INCLUDE_DIR NAMES smartuq.h)
        if(NOT SMARTUQ_LIBRARY OR NOT SMARTUQ_INCLUDE_DIR)
                message(FATAL_ERROR "SMARTUQ support was requested, but the smart-uq library or headers could not be located.")
        endif(NOT SMARTUQ_LIBRARY OR NOT SMARTUQ_INCLUDE_DIR)
        message(STATUS "smartuq library: ${SMARTUQ_LIBRARY}")
        message(STATUS "smartuq headers: ${SMARTUQ_INCLUDE_DIR}")

        set(MANDATORY_LIBRARIES ${MANDATORY_LIBRARIES} ${SMARTUQ_LIBRARY})
        include_directories("${SMARTUQ_INCLUDE_DIR}")      
endif(ENABLE_SMARTUQ)


file(GLOB SRC
  "${SRC_PATH}/LinearAlgebra/*.cpp"
  "${SRC_PATH}/Dynamics/*.cpp"
  "${SRC_PATH}/Events/*.cpp"
  "${SRC_PATH}/Integrators/*.cpp"
  "${SRC_PATH}/Utils/*.cpp"
)

set(MAIN_SRC
  "${SRC_PATH}/main.cpp"
)

file(GLOB TEST_SRC
  "${TEST_SRC_PATH}/LinearAlgebra/*.cpp"
  "${TEST_SRC_PATH}/Dynamics/*.cpp"
  "${TEST_SRC_PATH}/Events/*.cpp"
  "${TEST_SRC_PATH}/Integrators/*.cpp"
  "${TEST_SRC_PATH}/Utils/*.cpp"
)

# Set CMake build-type. If it not supplied by the user, the default built type is "Release".
if(((NOT CMAKE_BUILD_TYPE))
  OR (CMAKE_BUILD_TYPE STREQUAL "Release"))
    message(STATUS "WARNING: building release version!")
    set(CMAKE_BUILD_TYPE Release)
elseif((CMAKE_BUILD_TYPE STREQUAL "Debug"))
    message(STATUS "WARNING: building debug version!")
endif(((NOT CMAKE_BUILD_TYPE))
  OR (CMAKE_BUILD_TYPE STREQUAL "Release"))

# Set platform-specific compiler flags.
if(WIN32)
  if(MSVC)
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /EHsc /Ox /W3 /FC -D_SCL_SECURE_NO_WARNINGS")
    # We need to force MSVC to use static runtime:
    # (from http://www.cmake.org/Wiki/CMake_FAQ#Dynamic_Replace).
    foreach(flag_var
      CMAKE_CXX_FLAGS CMAKE_CXX_FLAGS_DEBUG CMAKE_CXX_FLAGS_RELEASE
      CMAKE_CXX_FLAGS_MINSIZEREL CMAKE_CXX_FLAGS_RELWITHDEBINFO)
      # Find all dynamic runtime (MD) references and replace with static (MT)
      if(${flag_var} MATCHES "/MD")
        string(REGEX REPLACE "/MD" "/MT" ${flag_var} "${${flag_var}}")
      endif(${flag_var} MATCHES "/MD")
    endforeach(flag_var)
  else(MSVC)
    set(CMAKE_LEGACY_CYGWIN_WIN32 0)
    set(CMAKE_CXX_FLAGS
      "${CMAKE_CXX_FLAGS} -Wall -Woverloaded-virtual -Wnon-virtual-dtor")
  endif(MSVC)
else(WIN32)
  set(CMAKE_CXX_FLAGS
    "${CMAKE_CXX_FLAGS} -Wall -Woverloaded-virtual -Wnon-virtual-dtor")
endif(WIN32)

if(CMAKE_COMPILER_IS_GNUCXX)
    set(CMAKE_CXX_FLAGS_DEBUG   "-O0 -g3")
    set(CMAKE_CXX_FLAGS_RELEASE "-O3")
    set(CMAKE_CXX_FLAGS         "${CMAKE_CXX_FLAGS} -fprofile-arcs -ftest-coverage")
endif(CMAKE_COMPILER_IS_GNUCXX)

configure_file(
        "${INCLUDE_PATH}/config.h.in"
        "${INCLUDE_PATH}/config.h"
        )

include_directories(${EIGEN_INCLUDE_PATH})

set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${LIB_PATH})
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${LIB_PATH})
if(BUILD_STATIC) 
   add_library(${LIB_NAME} STATIC ${SRC})
else(BUILD_STATIC)
   add_library(${LIB_NAME} SHARED ${SRC})
endif(BUILD_STATIC)

if(BUILD_MAIN)
  set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${BIN_PATH})
  add_executable(${MAIN_NAME} ${MAIN_SRC})
  target_link_libraries(${MAIN_NAME} ${LIB_NAME} ${MANDATORY_LIBRARIES})
endif(BUILD_MAIN)

if(BUILD_DOCS)
  find_package(Doxygen)

  if(NOT DOXYGEN_FOUND)
    message(FATAL_ERROR
            "Doxygen is needed to build the documentation. Please make sure it is installed.")
  endif(NOT DOXYGEN_FOUND)

  configure_file(${PROJECT_PATH}/Doxyfile.in
                 ${PROJECT_BINARY_DIR}/Doxyfile @ONLY IMMEDIATE)

  # Add a custom target to run Doxygen whenever the project is built.
  # If you do NOT want the documentation to be generated EVERY time you build the project
  # then leave out the 'ALL' keyword from the command below.
  add_custom_target(docs ALL COMMAND ${DOXYGEN_EXECUTABLE}
                    ${PROJECT_BINARY_DIR}/Doxyfile
                    SOURCES ${PROJECT_BINARY_DIR}/Doxyfile)
endif(BUILD_DOCS)

if(BUILD_TESTS)
  enable_testing()
  set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${TEST_PATH})

  add_executable(${TEST_NAME} ${TEST_SRC})
  target_link_libraries(${TEST_NAME} ${LIB_NAME} ${MANDATORY_LIBRARIES})
  add_test(NAME ${TEST_NAME} COMMAND "${TEST_PATH}/${TEST_NAME}")

endif(BUILD_TESTS)

if(BUILD_EXAMPLES)
        set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${EXAMPLES_PATH})
	add_subdirectory("${PROJECT_PATH}/examples")
endif(BUILD_EXAMPLES)

# Install header files and library.
# Destination is set by CMAKE_INSTALL_PREFIX and defaults to usual locations, unless overridden by
# user.
install(DIRECTORY ${INCLUDE_PATH}/
        DESTINATION ${CMAKE_PROJECT_NAME}/include)
	#FILES_MATCHING PATTERN "*.h")
install(TARGETS ${LIB_NAME} DESTINATION ${CMAKE_PROJECT_NAME}/lib)
install(TARGETS ${BIN_NAME} DESTINATION ${CMAKE_PROJECT_NAME}/bin)

# Set up packager.
set(CPACK_PACKAGE_DESCRIPTION_SUMMARY "${CMAKE_PROJECT_NAME}")
set(CPACK_PACKAGE_VENDOR              "${CMAKE_PROJECT_NAME}_VENDOR_NAME")
set(CPACK_PACKAGE_DESCRIPTION_FILE    "${PROJECT_PATH}/README.md")
set(CPACK_RESOURCE_FILE_LICENSE       "${PROJECT_PATH}/LICENSE.md")
set(CPACK_PACKAGE_VERSION_MAJOR       "${${CMAKE_PROJECT_NAME}_VERSION_MAJOR}")
set(CPACK_PACKAGE_VERSION_MINOR       "${${CMAKE_PROJECT_NAME}_VERSION_MINOR}")
set(CPACK_PACKAGE_VERSION_PATCH       "${${CMAKE_PROJECT_NAME}_VERSION_PATCH}")
set(CPACK_PACKAGE_INSTALL_DIRECTORY   "${CMAKE_PROJECT_NAME}")
if(WIN32 AND NOT UNIX)
  # There is a bug in NSI that does not handle full unix paths properly. Make
  # sure there is at least one set of four (4) backlasshes.
  set(CPACK_NSIS_DISPLAY_NAME         "${CPACK_PACKAGE_INSTALL_DIRECTORY}")
  set(CPACK_NSIS_CONTACT              "${CMAKE_PROJECT_NAME}_VENDOR_CONTACT")
  set(CPACK_NSIS_MODIFY_PATH ON)
else(WIN32 AND NOT UNIX)
endif(WIN32 AND NOT UNIX)
include(CPack)
